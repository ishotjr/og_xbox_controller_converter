https://github.com/emoose/Xb2XInput/blob/8f4187a23ecd834961151fb68b7a17334820986b/Xb2XInput/XboxController.cpp

https://www.pjrc.com/teensy/beta/usb20.pdf
https://www.intel.com/content/dam/www/public/us/en/documents/technical-specifications/ehci-specification-for-usb.pdf

- appears as a usb hub, wat
- I expected a HID
- ooooh the library is less libusb, more in-tree device driver compilation

- there's this whole ehci thing whoich defines mmio registers for accessing usb controllers

- eventually able to determine the hub device had another device attached, and that was the xbox controller
AAAA  idVendor 45e
AAAA  idProduct 1c
AAAA  deviceClass 9
AAAA  deviceSubClass 0
AAAA  deviceProtocol 0
*** 0 Device Hub1 45e:1c - connected ***
  deviceClass 9
  deviceSubClass 0
  deviceProtocol 0
AAAA  idVendor 45e
AAAA  idProduct 202
AAAA  deviceClass 0
AAAA  deviceSubClass 0
AAAA  deviceProtocol 0

- https://github.com/emoose/Xb2XInput/blob/8f4187a23ecd834961151fb68b7a17334820986b/Xb2XInput/XboxController.cpp#L11 0x45e 0x202 - "Microsoft Xbox Controller v1 (US)" bingo
- it's really not a HID, hmmm

- whack on the shenzhen io ost
- wow arduino is so bad
- tried platformio https://blog.jetbrains.com/clion/2020/08/arduino-from-hobby-to-prof-p1/ but got random errors
- fake cmakelists.txt just to get clion working, then forward from .ino to cpp immediately

XboxControllerDriver::pipeInCallback
00 14 00 00 00 00 00 00 00 00 00 00 F4 F0 00 00 96 1B 76 F3

vs

XboxControllerDriver::pipeInCallback
00 14 00 00 93 00 00 00 00 00 00 00 F4 F0 00 00 96 1B 76 F3

when holding down A. That's input!!!
TIL


ok, so how to  emulate a 360 controller
xinput

lib for arduino / teensy 3 series : https://github.com/dmadison/ArduinoXInput https://github.com/dmadison/ArduinoXInput_Teensy

ok, lets' port it to teensy 4!
fails enumeration if maxpacketsize is set to 8? dunno lol, it works if I leave it at 64. That took a while to figure out...
can't use endpoint 1 on teensy 4, reserved for future feature, so let's go ahead and remove that reservation... https://github.com/PaulStoffregen/cores/pull/578
    spent like 3 weekends grinding at this, first the enumeration problem, then I couldn't sned anything on endpoint 1
    even found and commented out the `if endpoint < 2` bit
    finally thought to search github issues for endpoint 1, found that pr thank god
        the only thing I was missing was the endpoint config for endpoint 1, so obvious in hindsight

    My favourite part is how the debug console is usb, so I can't print shit
    Just looking at wireshark all day (once I got the device to enumerate, wireshark doesn't show shit if you fail enumeration)
        URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL infinite loop


    when it worked -> look at wireshark oshi sthose look suspiciously like valid packets -> alt tab to gamepad tester FUCK YESSSSS

usbview is great


got rumble packets working after that, it was a bit awkward, but not three bad compared, took only a few hours